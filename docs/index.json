{
  "api/DotNetHelper_Encryption.Hash.PreEncryptData.html": {
    "href": "api/DotNetHelper_Encryption.Hash.PreEncryptData.html",
    "title": "Class Hash.PreEncryptData | DotNetHelper-Encryption",
    "keywords": "Class Hash.PreEncryptData Represents data to encrypt or decrypt. Inheritance Object Hash.PreEncryptData SymmetricKeyData Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : DotNetHelper_Encryption Assembly : DotNetHelper-Encryption.dll Syntax public class PreEncryptData Remarks Use the Text property to get/set a string representation. Constructors | Improve this Doc View Source PreEncryptData() Initializes a new instance of the Data class that is empty. Declaration public PreEncryptData() | Improve this Doc View Source PreEncryptData(Byte[]) Initializes a new instance of the Data class with the byte array value. Declaration public PreEncryptData(byte[] value) Parameters Type Name Description Byte [] value | Improve this Doc View Source PreEncryptData(String) Initializes a new instance of the Data class with the string value. Declaration public PreEncryptData(string value) Parameters Type Name Description String value | Improve this Doc View Source PreEncryptData(String, Encoding) Initializes a new instance of the Data class with the string value. Declaration public PreEncryptData(string value, Encoding encoding) Parameters Type Name Description String value Encoding encoding Properties | Improve this Doc View Source Bytes Gets or sets the byte representation of the data. Declaration public virtual byte[] Bytes { get; set; } Property Value Type Description Byte [] | Improve this Doc View Source DefaultEncoding Gets the default text encoding for all Data instances. Declaration public static Encoding DefaultEncoding { get; } Property Value Type Description Encoding | Improve this Doc View Source Encoding Gets or sets the text encoding for this Data instance. Declaration public Encoding Encoding { get; set; } Property Value Type Description Encoding | Improve this Doc View Source IsEmpty Indicates if no data is present in this instance. Declaration public bool IsEmpty { get; } Property Value Type Description Boolean | Improve this Doc View Source Text Gets or sets the text representation of the data using the Encoding value. Declaration public string Text { get; set; } Property Value Type Description String Methods | Improve this Doc View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString()"
  },
  "api/DotNetHelper_Encryption.SymmetricKeyData.html": {
    "href": "api/DotNetHelper_Encryption.SymmetricKeyData.html",
    "title": "Class SymmetricKeyData | DotNetHelper-Encryption",
    "keywords": "Class SymmetricKeyData Represents symmetric key data used to encrypt or decrypt data. Inheritance Object Hash.PreEncryptData SymmetricKeyData Inherited Members Hash.PreEncryptData.DefaultEncoding Hash.PreEncryptData.Encoding Hash.PreEncryptData.IsEmpty Hash.PreEncryptData.Text Hash.PreEncryptData.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : DotNetHelper_Encryption Assembly : DotNetHelper-Encryption.dll Syntax public class SymmetricKeyData : Hash.PreEncryptData Remarks Use the Text property to get/set a string representation. Constructors | Improve this Doc View Source SymmetricKeyData() Initializes a new instance of the SymmetricKeyData class that is empty. Declaration public SymmetricKeyData() | Improve this Doc View Source SymmetricKeyData(Byte[]) Initializes a new instance of the SymmetricKeyData class with the byte array value. Declaration public SymmetricKeyData(byte[] value) Parameters Type Name Description Byte [] value | Improve this Doc View Source SymmetricKeyData(String) Initializes a new instance of the SymmetricKeyData class with the string value. Declaration public SymmetricKeyData(string value) Parameters Type Name Description String value | Improve this Doc View Source SymmetricKeyData(String, Encoding) Initializes a new instance of the SymmetricKeyData class with the string value. Declaration public SymmetricKeyData(string value, Encoding encoding) Parameters Type Name Description String value Encoding encoding Properties | Improve this Doc View Source Bytes Gets or sets the byte representation of the data. This will be padded to MinBytes and trimmed to MaxBytes as necessary. Declaration public override byte[] Bytes { get; set; } Property Value Type Description Byte [] Overrides Hash.PreEncryptData.Bytes | Improve this Doc View Source MaxBytes Gets or sets the maximum number of bytes allowed for this data; if 0, no limit. Declaration public int MaxBytes { get; set; } Property Value Type Description Int32 | Improve this Doc View Source MinBytes Gets or sets the minimum number of bytes allowed for this data; if 0, no limit. Declaration public int MinBytes { get; set; } Property Value Type Description Int32"
  },
  "api/DotNetHelper_Encryption.Hash.html": {
    "href": "api/DotNetHelper_Encryption.Hash.html",
    "title": "Class Hash | DotNetHelper-Encryption",
    "keywords": "Class Hash Represents an object that performs hashing. Inheritance Object Hash Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : DotNetHelper_Encryption Assembly : DotNetHelper-Encryption.dll Syntax public class Hash : IDisposable Constructors | Improve this Doc View Source Hash(HashProvider) Initializes a new instance of the Hash class with the specified hash provider. Declaration public Hash(HashProvider provider) Parameters Type Name Description HashProvider provider Properties | Improve this Doc View Source Value Gets the previously calculated hash value. Declaration public Hash.PreEncryptData Value { get; } Property Value Type Description Hash.PreEncryptData Methods | Improve this Doc View Source Calculate(Hash.PreEncryptData) Calculates the hash for fixed length data. Declaration public Hash.PreEncryptData Calculate(Hash.PreEncryptData data) Parameters Type Name Description Hash.PreEncryptData data Returns Type Description Hash.PreEncryptData Exceptions Type Condition ArgumentNullException data is null. | Improve this Doc View Source Calculate(Hash.PreEncryptData, Hash.PreEncryptData) Calculates the hash for fixed length data with a prefixed salt value. Declaration public Hash.PreEncryptData Calculate(Hash.PreEncryptData data, Hash.PreEncryptData salt) Parameters Type Name Description Hash.PreEncryptData data Hash.PreEncryptData salt Returns Type Description Hash.PreEncryptData Remarks A \"salt\" value is random data prefixed to every hashed value to prevent common dictionary attacks. Exceptions Type Condition ArgumentNullException data or salt is null. | Improve this Doc View Source Calculate(Stream) Calculates the hash on a stream of arbitrary length. Declaration public Hash.PreEncryptData Calculate(Stream stream) Parameters Type Name Description Stream stream Returns Type Description Hash.PreEncryptData | Improve this Doc View Source Calculate(Stream, IProgress<Int32>) Calculates the hash on a seekable stream while reporting progress. Declaration public Hash.PreEncryptData Calculate(Stream stream, IProgress<int> progress) Parameters Type Name Description Stream stream IProgress < Int32 > progress Returns Type Description Hash.PreEncryptData | Improve this Doc View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Implements System.IDisposable"
  },
  "index.html": {
    "href": "index.html",
    "title": "DotNetHelper-Encryption | DotNetHelper-Encryption",
    "keywords": "DotNetHelper-Encryption This is a simple easy to use hashing & encryption library that supports the following Hashing CRC32 SHA1 SHA256 SHA384 SHA512 MD5 SymmetricAlgorithm DES RC2 Rijndael TripleDES AES Target Frameworks NET45 NET452 NETSTANDARD"
  },
  "api/DotNetHelper_Encryption.Enums.SymmetricProvider.html": {
    "href": "api/DotNetHelper_Encryption.Enums.SymmetricProvider.html",
    "title": "Enum SymmetricProvider | DotNetHelper-Encryption",
    "keywords": "Enum SymmetricProvider Specifies the symmetric encryption algorithm. Namespace : DotNetHelper_Encryption.Enums Assembly : DotNetHelper-Encryption.dll Syntax public enum SymmetricProvider Fields Name Description AES The ARS DES The PreEncryptData Encryption Standard provider supports a 64 bit key only. RC2 The Rivest Cipher 2 provider supports keys ranging from 40 to 128 bits, default is 128 bits. Rijndael The Rijndael (also known as AES) provider supports keys of 128, 192, or 256 bits with a default of 256 bits. TripleDES The TripleDES provider (also known as 3DES) supports keys of 128 or 192 bits with a default of 192 bits."
  },
  "api/DotNetHelper_Encryption.EncryptionAsymmetric.html": {
    "href": "api/DotNetHelper_Encryption.EncryptionAsymmetric.html",
    "title": "Class EncryptionAsymmetric | DotNetHelper-Encryption",
    "keywords": "Class EncryptionAsymmetric Represents an object that performs asymmetric encryption. Inheritance Object EncryptionAsymmetric Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : DotNetHelper_Encryption Assembly : DotNetHelper-Encryption.dll Syntax public class EncryptionAsymmetric Remarks The only provider supported is the RSACryptoServiceProvider. Constructors | Improve this Doc View Source EncryptionAsymmetric() Initializes a new instance of the Asymmetric class using the default key size. Declaration public EncryptionAsymmetric() | Improve this Doc View Source EncryptionAsymmetric(Int32) Initializes a new instance of the Asymmetric class using the specified key size. Declaration public EncryptionAsymmetric(int keySize) Parameters Type Name Description Int32 keySize Properties | Improve this Doc View Source KeyContainerName Gets or sets the name of the key container used to store this key on disk. Declaration public string KeyContainerName { get; set; } Property Value Type Description String Remarks This is an unavoidable side effect of the underlying Microsoft CryptoAPI. http://support.microsoft.com/default.aspx?scid=http://support.microsoft.com:80/support/kb/articles/q322/3/71.asp &NoWebContent=1 | Improve this Doc View Source KeySizeBits Gets the current key size, in bits. Declaration public int KeySizeBits { get; } Property Value Type Description Int32 | Improve this Doc View Source KeySizeMaxBits Gets the maximum supported key size, in bits. Declaration public int KeySizeMaxBits { get; } Property Value Type Description Int32 | Improve this Doc View Source KeySizeMinBits Gets the minimum supported key size, in bits. Declaration public int KeySizeMinBits { get; } Property Value Type Description Int32 | Improve this Doc View Source KeySizeStepBits Gets the valid key step sizes, in bits. Declaration public int KeySizeStepBits { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source Decrypt(Hash.PreEncryptData, PrivateKey) Decrypts data using the provided private key. Declaration public Hash.PreEncryptData Decrypt(Hash.PreEncryptData data, PrivateKey privateKey) Parameters Type Name Description Hash.PreEncryptData data PrivateKey privateKey Returns Type Description Hash.PreEncryptData Exceptions Type Condition ArgumentNullException data or privateKey is null. | Improve this Doc View Source Decrypt(Hash.PreEncryptData, String) Decrypts data using the provided private key XML. Declaration public Hash.PreEncryptData Decrypt(Hash.PreEncryptData data, string privateKeyXml) Parameters Type Name Description Hash.PreEncryptData data String privateKeyXml Returns Type Description Hash.PreEncryptData Exceptions Type Condition ArgumentNullException data or privateKeyXml is null. | Improve this Doc View Source Encrypt(Hash.PreEncryptData, PublicKey) Encrypts data using the provided public key. Declaration public Hash.PreEncryptData Encrypt(Hash.PreEncryptData data, PublicKey publicKey) Parameters Type Name Description Hash.PreEncryptData data PublicKey publicKey Returns Type Description Hash.PreEncryptData Exceptions Type Condition ArgumentNullException data or publicKey is null. | Improve this Doc View Source Encrypt(Hash.PreEncryptData, String) Encrypts data using the provided public key XML. Declaration public Hash.PreEncryptData Encrypt(Hash.PreEncryptData data, string publicKeyXml) Parameters Type Name Description Hash.PreEncryptData data String publicKeyXml Returns Type Description Hash.PreEncryptData Exceptions Type Condition ArgumentNullException data or publicKeyXml is null. | Improve this Doc View Source GenerateNewKeyset() Generates a new public/private key pair as objects. Declaration public static KeyValuePair<PublicKey, PrivateKey> GenerateNewKeyset() Returns Type Description KeyValuePair < PublicKey , PrivateKey > | Improve this Doc View Source GenerateNewXmlKeyset() Generates a new public/private key pair as XML strings. Declaration public static KeyValuePair<string, string> GenerateNewXmlKeyset() Returns Type Description KeyValuePair < String , String >"
  },
  "api/DotNetHelper_Encryption.HashProvider.html": {
    "href": "api/DotNetHelper_Encryption.HashProvider.html",
    "title": "Enum HashProvider | DotNetHelper-Encryption",
    "keywords": "Enum HashProvider Specifies the type of hash. Namespace : DotNetHelper_Encryption Assembly : DotNetHelper-Encryption.dll Syntax public enum HashProvider Fields Name Description CRC32 Cyclic Redundancy Check provider, 32-bit. MD5 Message Digest algorithm 5, 128-bit. SHA1 Secure Hashing Algorithm provider, SHA-1 variant, 160-bit. SHA256 Secure Hashing Algorithm provider, SHA-2 variant, 256-bit. SHA384 Secure Hashing Algorithm provider, SHA-2 variant, 384-bit. SHA512 Secure Hashing Algorithm provider, SHA-2 variant, 512-bit."
  },
  "api/DotNetHelper_Encryption.EncryptionSymmetric.html": {
    "href": "api/DotNetHelper_Encryption.EncryptionSymmetric.html",
    "title": "Class EncryptionSymmetric | DotNetHelper-Encryption",
    "keywords": "Class EncryptionSymmetric Provides access to factory methods for creating SymmetricAlgorithm instances. Inheritance Object EncryptionSymmetric Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : DotNetHelper_Encryption Assembly : DotNetHelper-Encryption.dll Syntax public static class EncryptionSymmetric Methods | Improve this Doc View Source Create(SymmetricProvider, CipherMode, PaddingMode) Creates a new instance of the SymmetricAlgorithm class based on the specified provider. Declaration public static SymmetricAlgorithm Create(SymmetricProvider provider, CipherMode cipherMode = CipherMode.ECB, PaddingMode padding = PaddingMode.PKCS7) Parameters Type Name Description SymmetricProvider provider Provides the type of symmetric algorithm to create. CipherMode cipherMode PaddingMode padding Returns Type Description SymmetricAlgorithm The SymmetricAlgorithm object. Exceptions Type Condition ArgumentException The provider is unknown."
  },
  "api/DotNetHelper_Encryption.Hashing.html": {
    "href": "api/DotNetHelper_Encryption.Hashing.html",
    "title": "Class Hashing | DotNetHelper-Encryption",
    "keywords": "Class Hashing Provides access to factory methods for creating HashAlgorithm instances. Inheritance Object Hashing Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : DotNetHelper_Encryption Assembly : DotNetHelper-Encryption.dll Syntax public static class Hashing Methods | Improve this Doc View Source Create(HashProvider) Creates a new instance of the HashAlgorithm class based on the specified provider. Declaration public static HashAlgorithm Create(HashProvider provider) Parameters Type Name Description HashProvider provider Provides the type of hash algorithm to create. Returns Type Description HashAlgorithm The HashAlgorithm object. Exceptions Type Condition ArgumentException The provider is unknown."
  },
  "api/DotNetHelper_Encryption.html": {
    "href": "api/DotNetHelper_Encryption.html",
    "title": "Namespace DotNetHelper_Encryption | DotNetHelper-Encryption",
    "keywords": "Namespace DotNetHelper_Encryption Classes EncryptionAsymmetric Represents an object that performs asymmetric encryption. EncryptionSymmetric Provides access to factory methods for creating SymmetricAlgorithm instances. Hash Represents an object that performs hashing. Hash.PreEncryptData Represents data to encrypt or decrypt. Hashing Provides access to factory methods for creating HashAlgorithm instances. PrivateKey Represents a private encryption key. PublicKey Represents a public encryption key. Symmetric Represents an object that performs symmetric encryption. SymmetricKeyData Represents symmetric key data used to encrypt or decrypt data. Enums HashProvider Specifies the type of hash."
  },
  "api/DotNetHelper_Encryption.Symmetric.html": {
    "href": "api/DotNetHelper_Encryption.Symmetric.html",
    "title": "Class Symmetric | DotNetHelper-Encryption",
    "keywords": "Class Symmetric Represents an object that performs symmetric encryption. Inheritance Object Symmetric Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : DotNetHelper_Encryption Assembly : DotNetHelper-Encryption.dll Syntax public class Symmetric : IDisposable Remarks Symmetric encryption uses a single key to encrypt and decrypt. Both parties (encryptor and decryptor) must share the same secret key. Constructors | Improve this Doc View Source Symmetric(SymmetricProvider) Initializes a new instance of the Symmetric class based on the specified provider. Declaration public Symmetric(SymmetricProvider provider) Parameters Type Name Description SymmetricProvider provider | Improve this Doc View Source Symmetric(SymmetricProvider, Boolean) Initializes a new instance of the Symmetric class based on the specified provider. Declaration public Symmetric(SymmetricProvider provider, bool useDefaultInitializationVector) Parameters Type Name Description SymmetricProvider provider Boolean useDefaultInitializationVector Properties | Improve this Doc View Source IntializationVector Gets or sets the initialization vector. Declaration public SymmetricKeyData IntializationVector { get; set; } Property Value Type Description SymmetricKeyData Remarks Setting a null value will be ignored. | Improve this Doc View Source Key Gets or sets the key used to encrypt or decrypt data. Declaration public SymmetricKeyData Key { get; set; } Property Value Type Description SymmetricKeyData Remarks Setting a null value will be ignored. Methods | Improve this Doc View Source Decrypt(Hash.PreEncryptData) Decrypts the specified data using preset key and initialization vector. Declaration public Hash.PreEncryptData Decrypt(Hash.PreEncryptData data) Parameters Type Name Description Hash.PreEncryptData data Returns Type Description Hash.PreEncryptData Exceptions Type Condition ArgumentNullException data is null. CryptographicException Unable to decrypt data. | Improve this Doc View Source Decrypt(Hash.PreEncryptData, SymmetricKeyData) Decrypts the specified data using provided key and preset initialization vector. Declaration public Hash.PreEncryptData Decrypt(Hash.PreEncryptData data, SymmetricKeyData key) Parameters Type Name Description Hash.PreEncryptData data SymmetricKeyData key Returns Type Description Hash.PreEncryptData Exceptions Type Condition ArgumentNullException data is null. CryptographicException Unable to decrypt data. | Improve this Doc View Source Decrypt(Stream) Decrypts the specified stream using the preset key and initialization vector. Declaration public Hash.PreEncryptData Decrypt(Stream stream) Parameters Type Name Description Stream stream Returns Type Description Hash.PreEncryptData Exceptions Type Condition ArgumentNullException stream is null. | Improve this Doc View Source Decrypt(Stream, SymmetricKeyData) Decrypts the specified stream using the provided key and preset initialization vector. Declaration public Hash.PreEncryptData Decrypt(Stream stream, SymmetricKeyData key) Parameters Type Name Description Stream stream SymmetricKeyData key Returns Type Description Hash.PreEncryptData Exceptions Type Condition ArgumentNullException stream is null. | Improve this Doc View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. | Improve this Doc View Source Encrypt(Hash.PreEncryptData) Encrypts the specified data using the preset key and initialization vector. Declaration public Hash.PreEncryptData Encrypt(Hash.PreEncryptData data) Parameters Type Name Description Hash.PreEncryptData data Returns Type Description Hash.PreEncryptData Exceptions Type Condition ArgumentNullException data is null. | Improve this Doc View Source Encrypt(Hash.PreEncryptData, SymmetricKeyData) Encrypts the specified data using the provided key. Declaration public Hash.PreEncryptData Encrypt(Hash.PreEncryptData d, SymmetricKeyData key) Parameters Type Name Description Hash.PreEncryptData d SymmetricKeyData key Returns Type Description Hash.PreEncryptData Exceptions Type Condition ArgumentNullException data is null. | Improve this Doc View Source Encrypt(Stream) Encrypts the specified stream to memory using the preset key and initialization vector. Declaration public Hash.PreEncryptData Encrypt(Stream stream) Parameters Type Name Description Stream stream Returns Type Description Hash.PreEncryptData Exceptions Type Condition ArgumentNullException stream is null. | Improve this Doc View Source Encrypt(Stream, SymmetricKeyData) Encrypts the specified stream to memory using the provided key. Declaration public Hash.PreEncryptData Encrypt(Stream stream, SymmetricKeyData key) Parameters Type Name Description Stream stream SymmetricKeyData key Returns Type Description Hash.PreEncryptData Exceptions Type Condition ArgumentNullException stream is null. | Improve this Doc View Source Encrypt(Stream, SymmetricKeyData, SymmetricKeyData) Encrypts the specified stream to memory using the provided key and initialization vector. Declaration public Hash.PreEncryptData Encrypt(Stream stream, SymmetricKeyData key, SymmetricKeyData iv) Parameters Type Name Description Stream stream SymmetricKeyData key SymmetricKeyData iv Returns Type Description Hash.PreEncryptData Exceptions Type Condition ArgumentNullException stream is null. Implements System.IDisposable"
  },
  "api/DotNetHelper_Encryption.Enums.html": {
    "href": "api/DotNetHelper_Encryption.Enums.html",
    "title": "Namespace DotNetHelper_Encryption.Enums | DotNetHelper-Encryption",
    "keywords": "Namespace DotNetHelper_Encryption.Enums Enums SymmetricProvider Specifies the symmetric encryption algorithm."
  },
  "api/DotNetHelper_Encryption.PrivateKey.html": {
    "href": "api/DotNetHelper_Encryption.PrivateKey.html",
    "title": "Class PrivateKey | DotNetHelper-Encryption",
    "keywords": "Class PrivateKey Represents a private encryption key. Inheritance Object PrivateKey Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : DotNetHelper_Encryption Assembly : DotNetHelper-Encryption.dll Syntax public class PrivateKey Constructors | Improve this Doc View Source PrivateKey() Initializes a new instance of the PrivateKey class. Declaration public PrivateKey() | Improve this Doc View Source PrivateKey(String) Initializes a new instance of the PrivateKey class. Declaration public PrivateKey(string keyXml) Parameters Type Name Description String keyXml Properties | Improve this Doc View Source Coefficient Declaration public string Coefficient { get; set; } Property Value Type Description String | Improve this Doc View Source Exponent Declaration public string Exponent { get; set; } Property Value Type Description String | Improve this Doc View Source Modulus Declaration public string Modulus { get; set; } Property Value Type Description String | Improve this Doc View Source PrimeExponentP Declaration public string PrimeExponentP { get; set; } Property Value Type Description String | Improve this Doc View Source PrimeExponentQ Declaration public string PrimeExponentQ { get; set; } Property Value Type Description String | Improve this Doc View Source PrimeP Declaration public string PrimeP { get; set; } Property Value Type Description String | Improve this Doc View Source PrimeQ Declaration public string PrimeQ { get; set; } Property Value Type Description String | Improve this Doc View Source PrivateExponent Declaration public string PrivateExponent { get; set; } Property Value Type Description String Methods | Improve this Doc View Source ExportToConfigFile(String) Writes the *.config file representation of this private key to a file. Declaration public void ExportToConfigFile(string filePath) Parameters Type Name Description String filePath | Improve this Doc View Source ExportToXmlFile(String) Writes the XML representation of this private key to a file. Declaration public void ExportToXmlFile(string filePath) Parameters Type Name Description String filePath | Improve this Doc View Source LoadFromXml(String) Loads the private key from an XML string. Declaration public void LoadFromXml(string keyXml) Parameters Type Name Description String keyXml | Improve this Doc View Source ToConfigSection() Returns the *.config file XML section representing this private key. Declaration public string ToConfigSection() Returns Type Description String | Improve this Doc View Source ToParameters() Converts this private key to an RSAParameters object. Declaration public RSAParameters ToParameters() Returns Type Description RSAParameters | Improve this Doc View Source ToXml() Converts this private key to its XML string representation. Declaration public string ToXml() Returns Type Description String"
  },
  "articles/gettingstarted.html": {
    "href": "articles/gettingstarted.html",
    "title": "| DotNetHelper-Encryption",
    "keywords": ""
  },
  "api/DotNetHelper_Encryption.PublicKey.html": {
    "href": "api/DotNetHelper_Encryption.PublicKey.html",
    "title": "Class PublicKey | DotNetHelper-Encryption",
    "keywords": "Class PublicKey Represents a public encryption key. Inheritance Object PublicKey Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : DotNetHelper_Encryption Assembly : DotNetHelper-Encryption.dll Syntax public class PublicKey Constructors | Improve this Doc View Source PublicKey() Initializes a new instance of the PublicKey class. Declaration public PublicKey() | Improve this Doc View Source PublicKey(String) Initializes a new instance of the PublicKey class. Declaration public PublicKey(string keyXml) Parameters Type Name Description String keyXml Properties | Improve this Doc View Source Exponent Declaration public string Exponent { get; set; } Property Value Type Description String | Improve this Doc View Source Modulus Declaration public string Modulus { get; set; } Property Value Type Description String Methods | Improve this Doc View Source ExportToConfigFile(String) Writes the *.config file representation of this public key to a file. Declaration public void ExportToConfigFile(string filePath) Parameters Type Name Description String filePath | Improve this Doc View Source ExportToXmlFile(String) Writes the XML representation of this public key to a file. Declaration public void ExportToXmlFile(string filePath) Parameters Type Name Description String filePath | Improve this Doc View Source LoadFromXml(String) Loads the public key from an XML string. Declaration public void LoadFromXml(string keyXml) Parameters Type Name Description String keyXml | Improve this Doc View Source ToConfigSection() Returns the *.config file XML section representing this public key. Declaration public string ToConfigSection() Returns Type Description String | Improve this Doc View Source ToParameters() Converts this public key to an RSAParameters object. Declaration public RSAParameters ToParameters() Returns Type Description RSAParameters | Improve this Doc View Source ToXml() Converts this public key to its XML string representation. Declaration public string ToXml() Returns Type Description String"
  }
}